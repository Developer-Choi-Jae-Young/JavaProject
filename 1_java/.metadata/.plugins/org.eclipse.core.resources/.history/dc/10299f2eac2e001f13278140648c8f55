package main;

import java.lang.reflect.Constructor;
import java.lang.reflect.Executable;
import java.lang.reflect.Parameter;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;


import Function.UserInfo;
import database.ClassType;
import database.Functional;
import dto.User;
import etc.Grade;

public class Run {

	public static void main(String[] args) {
		System.out.println("Program Start ...");
		Scanner sc = new Scanner(System.in);
		UserInfo ui = new UserInfo();
		
		/*
		 	try {
			Class<?> class1 = Class.forName("dto.User");
			Constructor<?>[] constructor = class1.getConstructors();
			
			List<Class<?>> constarctParamClass = new ArrayList<Class<?>>(); 
			
			for(Constructor<?> c : constructor) {				
				Parameter[] p = c.getParameters();
				
				if(p.length <= 0) continue;
				
				for(Parameter pp : p) {
					String str3 = pp.getParameterizedType().getTypeName();
					constarctParamClass.add(Class.forName(str3));
					System.out.println(str3);
				}
				
				Class<?>[] arrayConstractParamClass = new Class<?>[constarctParamClass.size()];
				for(int i = 0; i < arrayConstractParamClass.length; i++) {
					arrayConstractParamClass[i] = constarctParamClass.get(i);
				}
				Constructor<?> constructor3 = class1.getConstructor(arrayConstractParamClass);
				Object human3 = constructor3.newInstance(1, "a","a",1,"a","a",Grade.ADMIN,ClassType.CLASS_A);
				System.out.print(human3);
			}
			
			Object human1 = constructor1.newInstance();
		} catch (Exception e) {
			e.printStackTrace();
		}*/
		
		Functional fi = new Functional();
		fi.CallSql(fi.Connect(),"Select * from User;");
		fi.ResultSetToArray(null, User.class, null);
		
		
		
		int loopKey = 0;
		boolean bflag = false;

		while (true) {
			if (bflag)
				break;

			switch (loopKey) {
			case 0:
				System.out.println("1. 로그인");
				System.out.println("2. 회원가입");
				System.out.println("3. 자습기록현황");
				System.out.println("4. 로그인");
				System.out.println("99. 종료");
				System.out.println(" ");
				System.out.print("메뉴 선택 : ");
				int num = sc.nextInt();
				
				if(num == 99) {
					System.out.println("프로그램을 종료합니다.");
					bflag = true;
				} else if(0 < num && 5 > num) {
					loopKey += (num*100);
				} else {
					System.out.println("메뉴선택을 잘못하셨습니다.");
				}
				break;
				
			case 100:
				System.out.println("===========================");
				System.out.println("=========1.로그인===========");
				System.out.println("===========================");
				
				System.out.print("아이디 : ");
				String id = sc.next();
				System.out.print("비밀번호 : ");
				String password = sc.next();

				if (ui.Login(id, password)) {
					loopKey++;
				} else {
					System.out.println("로그인을 실패하였습니다.");
					System.out.println("");
					loopKey = 0;
				}
				break;
				
			case 200:
				System.out.println("===========================");
				System.out.println("=========2.회원가입==========");
				System.out.println("===========================");
				break;
				
			case 300:
				System.out.println("===========================");
				System.out.println("=========3.자습기록현황=======");
				System.out.println("===========================");
				break;
				
			case 400:
				System.out.println("===========================");
				System.out.println("=========4.로그인===========");
				System.out.println("===========================");
				break;
			default:
				System.out.print("Program 비정상 종료!!!");
				bflag = true;
			}
		}
	}
}
