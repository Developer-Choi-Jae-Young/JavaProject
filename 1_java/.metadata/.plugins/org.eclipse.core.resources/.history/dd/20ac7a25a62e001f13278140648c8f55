package database;

import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import dto.User;

import java.lang.reflect.Constructor;
import java.sql.Connection;

public class Functional {
	private String driver = "com.mysql.cj.jdbc.Driver";
	private String url = "jdbc:mysql://127.0.0.1:3306/server?serverTimezone=UTC&useUniCode=yes&characterEncoding=UTF-8";
	private String user = "root";
	private String password = "root";

	public Statement Connect() {
		Connection conn = null;
		Statement stmt = null;

		try {
			Class.forName(driver);

			conn = DriverManager.getConnection(url, user, password);
			stmt = conn.createStatement();

		} catch (Exception e) {
			e.printStackTrace();
		}
		//Connection & Statement 어떻게 해제할건데?
		return stmt;
	}

	public ResultSet CallSql(Statement stmt, String strSql) {
		try {
			return stmt.executeQuery(strSql);
		} catch (Exception e) {
			e.printStackTrace();
			//Connection & Statement 어떻게 해제할건데?
			return null;
		}
	}

	public List<Object> ResultSetToArray(ResultSet resultSet, Class clazz, Object ... args) {
		try {
			while (resultSet.next()) {
				//Mysql 컬럼이랑 DtoClass의 속성변수들과 어떻게 맵핑 시킬까?
				String userId = resultSet.getString("user_id");
				String userPw = resultSet.getString(2);
				String name = resultSet.getString("name");
				String phone = resultSet.getString("phone");
				String grade = resultSet.getString("grade");
				int age = resultSet.getInt("age");
				
				Object o = GetObject(clazz, args);
				//Object o = clazz.getDeclaredConstructor(String[].class).newInstance(new Object[]{args});
				//ArrayList<Object> list = new ArrayList<>();
			}
		} catch (Exception e) {
			e.printStackTrace();
			//ResultSet 어떻게 해제할건데?
			return null;
		}
		return null;
	}
	
	public String[] GetField(Class clazz) {
		String[] returnValue = null;
		
		List<Class<?>> list = new ArrayList<Class<?>>();
		Class<?>[] claz;
		for(Object o : args) {
			list.add(o.getClass());
		}
		
		claz = new Class<?>[list.size()];
		
		try {			
			Class<?> class1 = Class.forName(clazz.getName());
			returnValue = class1.getConstructor(claz).newInstance(args);
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		return returnValue;
	}
	
	public Object GetObject(Class clazz, Object ... args) {
		Object returnValue = null;
		
		List<Class<?>> list = new ArrayList<Class<?>>();
		Class<?>[] claz;
		for(Object o : args) {
			list.add(o.getClass());
		}
		
		claz = new Class<?>[list.size()];
		
		try {			
			Class<?> class1 = Class.forName(clazz.getName());
			returnValue = class1.getConstructor(claz).newInstance(args);
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		return returnValue;
	}
}
